## 1. bruteforce

```
class Solution {
public:
    int calculate(vector<vector<char>>& grid, int i, int j) {
        int row = 0, col = 0, m = grid.size(), n = grid[0].size();
        for (int k = 0; k < m; ++k) {
            if (grid[k][j] == 'W') {
                if (k > i) break;
                row = 0;
            }
            if (grid[k][j] == 'E') {
                row++;
            }
        }
        for (int k = 0; k < n; ++k) {
            if (grid[i][k] == 'W') {
                if (k > j) break;
                col = 0;
            }
            if (grid[i][k] == 'E') {
                col++;
            }            
        }
        return row + col;
    }
    int maxKilledEnemies(vector<vector<char>>& grid) {
        int m = grid.size(), n = grid[0].size();
        
        int res = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == '0') {
                    res = max(res, calculate(grid, i, j));
                }
            }
        }
        return res;
    }
};
```

## 2. dp

```
class Solution {
public:
    int cal_col(vector<vector<char>>& grid, int i, int j, vector<int> &dp) {
        int res = 0, m = grid.size(), n = grid[0].size(), wall = 0;
        for (int k = 0; k < m; ++k) {
            if (grid[k][j] == 'W') {
                wall++;
                if (k > i) break;
                res = 0;
            }
            if (grid[k][j] == 'E') {
                res++;
            }
        }
        if (wall == 0) dp[m + j] = res;
        return res;
    }
    int cal_row(vector<vector<char>>& grid, int i, int j, vector<int> &dp) {
        int res = 0, m = grid.size(), n = grid[0].size(), wall = 0;
        for (int k = 0; k < n; ++k) {
            if (grid[i][k] == 'W') {
                wall++;
                if (k > j) break;
                res = 0;
            }
            if (grid[i][k] == 'E') {
                res++;
            }            
        }
        if (wall == 0) dp[i] = res;
        return res;
    }

    int maxKilledEnemies(vector<vector<char>>& grid) {
        int m = grid.size(), n = grid[0].size();
        vector<int> dp(m + n, 0);
        int res = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == '0') {
                    int tmp = 0;
                    if (dp[i]) tmp += dp[i];
                    else tmp += cal_row(grid, i, j, dp);
                    if (dp[m + j]) tmp += dp[m + j];
                    else tmp += cal_col(grid, i, j, dp);
                    res = max(res, tmp);
                }
            }
        }
        return res;
    }
};
```
